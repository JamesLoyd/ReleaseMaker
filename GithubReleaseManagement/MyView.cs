//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.17.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

using System.Text;
using System.Text.RegularExpressions;
using GithubReleaseManagement.Models;
using Octokit;
using Tomlyn;

namespace GithubReleaseManagement
{
    using Terminal.Gui;


    public partial class MyView
    {
        public MyView()
        {
            InitializeComponent();
            var tomlText = File.ReadAllText("Config.toml");
            var config = Toml.ToModel<Config>(tomlText);
            var token = config.Token.Value;
            InitializeComponent();
            ticketUrlPrefixTxtField.Text = config.TicketUrlPrefix;
            var github = new GitHubClient(new ProductHeaderValue("GitCommander"))
            {
                Credentials = new Credentials(token)
            };
            getRlbtn.Clicked += () =>
            {
                var orgUser = orgUserTxtField.Text.ToString();
                var repo = repoTxtField.Text.ToString();
                var prNumber = prNumberTxtField.Text.ToString();
                var downMergeIgnored = checkBox.Checked;
                var ticketUrlPrefix = ticketUrlPrefixTxtField.Text.ToString();
                var releases = github.PullRequest.Commits(orgUser, repo, int.Parse(prNumber)).Result;
                var commitList = releases.Select(x => x.Commit.Message);

                var stringbuilder = new StringBuilder();
                foreach (var commit in commitList)
                {
                    var sanitizedCommit = commit.Split('(')[0];
                    if(downMergeIgnored && IsDownMergePR(sanitizedCommit))
                    {
                        continue;
                    }

                    if (!sanitizedCommit.ToUpper().Contains("VNEXT-") && !sanitizedCommit.ToUpper().Contains("VNEXT ") && !sanitizedCommit.ToUpper().Contains("VNEXT "))
                    {
                        stringbuilder.AppendLine($"* {commit} ---- [WARNING: TICKET NUMBER NOT FOUND]");
                    }
                    else
                    {
                        if(sanitizedCommit.Split("-").Length > 2)
                        {
                            var ticketNumber = sanitizedCommit.Split("-")[1];
                            stringbuilder.AppendLine($"* {ticketUrlPrefix}{ticketNumber}");
                        }
                        else
                        { 
                            stringbuilder.AppendLine($"* {ticketUrlPrefix}{sanitizedCommit}");
                        }
                    }
                }
                
                releaseListTv.Text = stringbuilder.ToString();
            };
        }
        
        private bool IsDownMergePR(string commit)
        {
            return commit.ToLower().Contains("qa -> dev") || commit.ToLower().Contains("downmerge") || commit.ToLower().Contains("merge down");
        }
    }
}